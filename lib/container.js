// Generated by CoffeeScript 1.7.1
(function() {
  var container, exports, util;

  util = require("./utils");

  container = exports = module.exports = {};

  container.initContainer = function() {
    this.settings = {};
    this.tasks = {};
    return this.setDefaultConfig();
  };

  container.setDefaultConfig = function() {
    return this.set("interval", 1);
  };

  container.set = function(setting, val) {
    if (arguments.length === 1) {
      return this.settings[setting];
    }
    return this.settings[setting] = val;
  };

  container.registerTask = function(taskName, fn) {
    if (!util.is("Function", fn)) {
      throw new Error("callback function required");
    }
    return this.tasks[taskName] = {
      fn: fn
    };
  };

  container.removeTask = function(taskName) {
    return container.tasks[taskName] = null;
  };

  container.addTaskEntity = function(taskName, entity) {
    var hash, task;
    if (!this.tasks[taskName]) {
      throw new Error("Task name invalid.");
    }
    hash = util.getHash(entity);
    task = this.tasks[taskName];
    if (!task[hash]) {
      task[hash] = {
        entity: entity,
        count: 1
      };
    } else {
      task[hash].count++;
    }
    if (!this.started) {
      return this.begin();
    }
  };

  container.begin = function() {
    var self;
    self = this;
    this.started = true;
    return this.timer = setInterval(function() {
      return self.runTask();
    }, self.set("interval") * 60 * 1000);
  };

  container.stop = function() {
    if (this.timer) {
      clearInterval(this.timer);
    }
    return this.started = false;
  };

  container.runTask = function() {
    var err, hash, obj, task, taskName, _ref;
    _ref = this.tasks;
    for (taskName in _ref) {
      task = _ref[taskName];
      if (task) {
        for (hash in task) {
          obj = task[hash];
          if (hash !== "fn" && obj.count > 0) {
            try {
              task.fn(obj);
            } catch (_error) {
              err = _error;
              console.error(err);
            }
            obj.count = 0;
          }
        }
      }
    }
  };

}).call(this);

//# sourceMappingURL=container.map
